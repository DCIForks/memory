:root {
  --card-size: min(50vmax, 100vmin);
  --font-size: calc(0.825 * var(--card-size));
  --card-color: #000;
  --border-color: #363;
  --border-width: 0.05em;
  --border-radius: calc(var(--border-width) * 2);

  /* Tweak the 3D perspective to prevent overlap as a card turns*/
  --z-transform: translateZ(-60vmax); 
}

#root {
  display: flex;
  justify-content: center;
  flex-direction: column;
}

/* STEP 04: Simulated turn */

.space {
  /* The size of a card is set by its container div */
  font-size: var(--font-size);
  width: var(--card-size);
  height: var(--card-size);

  /* perspective determines how "close" to the screen the div appears */
  perspective: 1000vmax;
}

.space div {
  /* Make .card, .front and .back children fill the .space div */
  height: 100%;
  width: 100%;
}

.card {
  background-color: var(--card-color);
  border: var(--border-width) solid var(--border-color);
  border-radius: var(--border-radius);
  box-sizing: border-box;

  /* Set position so that the .front and .back children are
     attached to the .card div and rotate with it.
  */
  position: relative;

  /* 3D transform settings */
  transform-style: preserve-3d; /* inherit from .card */
  transform-origin: center right;
  transform: var(--z-transform);
  transition: transform 1s;
}

.card div {
  display: flex;
  justify-content: center;
  align-items: center;

  /* Place .front and .back at exactly the same location, back to back */
  position: absolute;
  backface-visibility: hidden;
}

.back {
  background: #363;
  background: radial-gradient(circle, #242 0%, #363 100%);
}

.front {
  /* Turn .front to face away from viewer, by default */
  transform: rotateY(180deg)
}

.card.face-up {
  /* Turn the front of the card to face the viewer when .face-up */
  transform: var(--z-transform) translateX(-100%) rotateY(180deg);
}

div.row {
  display: flex;
  justify-content: center;
}